1.Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company.
Use a nested SELECT statement.
USE TelerikAcademy
SELECT FirstName, LastName, Salary
	FROM Employees 
	WHERE Salary = 
	(SELECT MIN(Salary) FROM Employees)
	
2. Write a SQL query to find the names and salaries of the employees that have a salary 
that is up to 10% higher than the minimal salary for the company.
USE TelerikAcademy
SELECT FirstName, LastName, Salary
	FROM Employees 
	WHERE Salary < 
	(SELECT (MIN(Salary) + MIN(Salary) * 0.1) FROM Employees)
	
3.Write a SQL query to find the full name, salary and department of the employees t
hat take the minimal salary in their department.
Use a nested SELECT statement.
USE TelerikAcademy
SELECT FirstName, LastName, Salary, DepartmentID
  FROM Employees e
  WHERE Salary = 
  (SELECT MAX(Salary) FROM Employees
	WHERE DepartmentID = e.DepartmentID)
	ORDER BY DepartmentID
	
4.Write a SQL query to find the average salary in the department #1.
USE TelerikAcademy
SELECT AVG(Salary)
  FROM Employees
  WHERE DepartmentID = 1 
  
5.Write a SQL query to find the average salary in the "Sales" department.
USE TelerikAcademy
SELECT  AVG(e.Salary) AS AvgSalary
  FROM Employees e
  JOIN Departments d
  ON e.DepartmentID = d.DepartmentID
  WHERE d.Name = 'Sales'
  
6.Write a SQL query to find the number of employees in the "Sales" department.
USE TelerikAcademy
SELECT  COUNT(*) AS CountSalesEmployeers
  FROM Employees e
  JOIN Departments d
  ON e.DepartmentID = d.DepartmentID
  WHERE d.Name = 'Sales'

7.Write a SQL query to find the number of all employees that have manager.
USE TelerikAcademy
SELECT  COUNT(*) AS EmpWhoHaveManager
  FROM Employees e
	  WHERE e.ManagerID IS NOT NULL

8.Write a SQL query to find the number of all employees that have no manager.
USE TelerikAcademy
SELECT  COUNT(*) AS EmpWhoHaveManager
  FROM Employees e
	  WHERE e.ManagerID IS NULL	  
9.Write a SQL query to find all departments and the average salary for each of them.
USE TelerikAcademy
SELECT DepartmentID, AVG(Salary) AS AverageSalary
  FROM Employees
  GROUP BY DepartmentID
  
10.Write a SQL query to find the count of all employees in each department and for each town.
USE TelerikAcademy
SELECT t.Name AS TownName, d.Name AS DepartmentName, COUNT(e.EmployeeID) AS CountEmployeers
  FROM Employees e
  JOIN Departments d
  ON e.DepartmentID = d.DepartmentID
  JOIN Addresses a
  ON a.AddressID = e.AddressID
  JOIN Towns t 
  ON a.TownID = t.TownID
  GROUP BY d.Name, t.Name
  
11.Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.
USE TelerikAcademy
SELECT m.ManagerID, COUNT(e.EmployeeID) AS CountOfEmp
  FROM Employees e
  INNER JOIN Employees m
	ON e.ManagerID = m.EmployeeID
  GROUP BY m.ManagerID
  HAVING COUNT(e.EmployeeID) = 5
  
12.Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)".
USE TelerikAcademy
SELECT e.FirstName EmpFirstName, e.LastName EmpLastName, 
	   COALESCE(m.LastName, '(no manager)') AS MngLastName
	FROM Employees e LEFT JOIN Employees m
	ON e.ManagerID = m.EmployeeID
	
13.Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in LEN(str) function.
USE TelerikAcademy
SELECT e.LastName, LEN(e.LastName) AS EmpLastNameLenght
	FROM Employees e
	WHERE LEN(e.LastName) = 5
	
14.Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds".
Search in Google to find how to format dates in SQL Server.
USE TelerikAcademy
SELECT CONVERT(NVARCHAR(30), GETDATE(), 113) AS CurrentDate

15.Write a SQL statement to create a table Users. Users should have username, password, full name and last login time.
Choose appropriate data types for the table fields. Define a primary key column with a primary key constraint.
Define the primary key column as identity to facilitate inserting records.
Define unique constraint to avoid repeating usernames.
Define a check constraint to ensure the password is at least 5 characters long.
USE TelerikAcademy
CREATE TABLE Users(
	Id INT IDENTITY,
	Username VARCHAR(20) NOT NULL,
	Password VARCHAR(20) NOT NULL,
	FullName NVARCHAR(100) NOT NULL,
	LastLog DATETIME2,
	CONSTRAINT PK_Users PRIMARY KEY(Id),
	CONSTRAINT UC_Users UNIQUE(Id, Username),
	CONSTRAINT CHK_Pass_Lenght CHECK(LEN(Password) >= 5)
	)
	
16.Write a SQL statement to create a view that displays the users from the Users table that have been in the system today.
Test if the view works correctly.
CREATE VIEW [Todey Loged Users] AS
    SELECT Username  FROM Users
		WHERE (DATEDIFF(DAY, LastLog, GETDATE())) < 1
		
CREATE VIEW [Todey Loged Users] AS
	SELECT Username  FROM Users
		WHERE DATEPART(dd,GETDATE()) = DATEPART(dd,LastLog)
		
17.Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint).
Define primary key and identity column.
USE TelerikAcademy
CREATE TABLE Groups(
	Id INT IDENTITY,
	Name VARCHAR(20) NOT NULL,
	CONSTRAINT PK_Groups PRIMARY KEY(Id),
	CONSTRAINT UC_Groups UNIQUE(Id, Name)
	)
	
18.Write a SQL statement to add a column GroupID to the table Users.
Fill some data in this new column and as well in the `Groups table.
Write a SQL statement to add a foreign key constraint between tables Users and Groups tables.
USE TelerikAcademy
ALTER TABLE Users 
	ADD GroupID INT
	
USE TelerikAcademy
ALTER TABLE Users 
	ADD CONSTRAINT FK_Groups_Users
		FOREIGN KEY (GroupID)
		REFERENCES Groups(Id)
		
19.Write SQL statements to insert several records in the Users and Groups tables.
