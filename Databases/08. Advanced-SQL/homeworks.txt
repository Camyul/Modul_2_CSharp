--1.Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company.
Use a nested SELECT statement.
USE TelerikAcademy
SELECT FirstName, LastName, Salary
	FROM Employees 
	WHERE Salary = 
	(SELECT MIN(Salary) FROM Employees)
	
--2. Write a SQL query to find the names and salaries of the employees that have a salary 
that is up to 10% higher than the minimal salary for the company.
USE TelerikAcademy
SELECT FirstName, LastName, Salary
	FROM Employees 
	WHERE Salary < 
	(SELECT (MIN(Salary) + MIN(Salary) * 0.1) FROM Employees)
	
--3.Write a SQL query to find the full name, salary and department of the employees t
hat take the minimal salary in their department.
Use a nested SELECT statement.
USE TelerikAcademy
SELECT FirstName, LastName, Salary, DepartmentID
  FROM Employees e
  WHERE Salary = 
  (SELECT MAX(Salary) FROM Employees
	WHERE DepartmentID = e.DepartmentID)
	ORDER BY DepartmentID
	
--4.Write a SQL query to find the average salary in the department #1.
USE TelerikAcademy
SELECT AVG(Salary)
  FROM Employees
  WHERE DepartmentID = 1 
  
--5.Write a SQL query to find the average salary in the "Sales" department.
USE TelerikAcademy
SELECT  AVG(e.Salary) AS AvgSalary
  FROM Employees e
  JOIN Departments d
  ON e.DepartmentID = d.DepartmentID
  WHERE d.Name = 'Sales'
  
--6.Write a SQL query to find the number of employees in the "Sales" department.
USE TelerikAcademy
SELECT  COUNT(*) AS CountSalesEmployeers
  FROM Employees e
  JOIN Departments d
  ON e.DepartmentID = d.DepartmentID
  WHERE d.Name = 'Sales'

--7.Write a SQL query to find the number of all employees that have manager.
USE TelerikAcademy
SELECT  COUNT(*) AS EmpWhoHaveManager
  FROM Employees e
	  WHERE e.ManagerID IS NOT NULL

--8.Write a SQL query to find the number of all employees that have no manager.
USE TelerikAcademy
SELECT  COUNT(*) AS EmpWhoHaveManager
  FROM Employees e
	  WHERE e.ManagerID IS NULL	  
--9.Write a SQL query to find all departments and the average salary for each of them.
USE TelerikAcademy
SELECT DepartmentID, AVG(Salary) AS AverageSalary
  FROM Employees
  GROUP BY DepartmentID
  
--10.Write a SQL query to find the count of all employees in each department and for each town.
USE TelerikAcademy
SELECT t.Name AS TownName, d.Name AS DepartmentName, COUNT(e.EmployeeID) AS CountEmployeers
  FROM Employees e
  JOIN Departments d
  ON e.DepartmentID = d.DepartmentID
  JOIN Addresses a
  ON a.AddressID = e.AddressID
  JOIN Towns t 
  ON a.TownID = t.TownID
  GROUP BY d.Name, t.Name
  
--11.Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.
USE TelerikAcademy
SELECT m.ManagerID, COUNT(e.EmployeeID) AS CountOfEmp
  FROM Employees e
  INNER JOIN Employees m
	ON e.ManagerID = m.EmployeeID
  GROUP BY m.ManagerID
  HAVING COUNT(e.EmployeeID) = 5
  
--12.Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)".
USE TelerikAcademy
SELECT e.FirstName EmpFirstName, e.LastName EmpLastName, 
	   COALESCE(m.LastName, '(no manager)') AS MngLastName
	FROM Employees e LEFT JOIN Employees m
	ON e.ManagerID = m.EmployeeID
	
--13.Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in LEN(str) function.
USE TelerikAcademy
SELECT e.LastName, LEN(e.LastName) AS EmpLastNameLenght
	FROM Employees e
	WHERE LEN(e.LastName) = 5
	
--14.Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds".
Search in Google to find how to format dates in SQL Server.
USE TelerikAcademy
SELECT CONVERT(NVARCHAR(30), GETDATE(), 113) AS CurrentDate

--15.Write a SQL statement to create a table Users. Users should have username, password, full name and last login time.
/*Choose appropriate data types for the table fields. Define a primary key column with a primary key constraint.
Define the primary key column as identity to facilitate inserting records.
Define unique constraint to avoid repeating usernames.
Define a check constraint to ensure the password is at least 5 characters long.
USE TelerikAcademy*/
CREATE TABLE Users(
	Id INT IDENTITY,
	Username VARCHAR(20) NOT NULL,
	Password VARCHAR(20) NOT NULL,
	FullName NVARCHAR(100) NOT NULL,
	LastLog DATETIME2,
	CONSTRAINT PK_Users PRIMARY KEY(Id),
	CONSTRAINT UC_Users UNIQUE(Id, Username),
	CONSTRAINT CHK_Pass_Lenght CHECK(LEN(Password) >= 5)
	)
	
--16.Write a SQL statement to create a view that displays the users from the Users table that have been in the system today.
Test if the view works correctly.
CREATE VIEW [Todey Loged Users] AS
    SELECT Username  FROM Users
		WHERE (DATEDIFF(DAY, LastLog, GETDATE())) < 1
		
CREATE VIEW [Todey Loged Users] AS
	SELECT Username  FROM Users
		WHERE DATEPART(dd,GETDATE()) = DATEPART(dd,LastLog)
		
--17.Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint).
Define primary key and identity column.
USE TelerikAcademy
CREATE TABLE Groups(
	Id INT IDENTITY,
	Name VARCHAR(20) NOT NULL,
	CONSTRAINT PK_Groups PRIMARY KEY(Id),
	CONSTRAINT UC_Groups UNIQUE(Id, Name)
	)
	
--18.Write a SQL statement to add a column GroupID to the table Users.
Fill some data in this new column and as well in the `Groups table.
Write a SQL statement to add a foreign key constraint between tables Users and Groups tables.
USE TelerikAcademy
ALTER TABLE Users 
	ADD GroupID INT
	
USE TelerikAcademy
ALTER TABLE Users 
	ADD CONSTRAINT FK_Groups_Users
		FOREIGN KEY (GroupID)
		REFERENCES Groups(Id)
		
--19.Write SQL statements to insert several records in the Users and Groups tables.

INSERT INTO Groups (Name)
	VALUES ('Students')
	
INSERT INTO Users (Username, Password, FullName, LastLog)
	VALUES ('Toti', '123456', 'Toshko Todorov', '2016-12-05 11:22:02.111')
	
--20.Write SQL statements to update some of the records in the Users and Groups tables.

UPDATE Groups 
	SET Name = 'Admins'
	WHERE Id = 1
	
UPDATE Users 
	SET Password = '111222'
	WHERE Id = 1
	
--21. Write SQL statements to delete some of the records from the Users and Groups tables.

DELETE FROM Users
WHERE Id = 1

DELETE FROM Groups
WHERE Name = 'Students'

--22.Write SQL statements to insert in the Users table the names of all employees from the Employees table.
/*Combine the first and last names as a full name.
For username use the first letter of the first name + the last name (in lowercase).
Use the same for the password, and NULL for last login time.*/

BEGIN TRAN

INSERT INTO Users(Username, Password, FullName, LastLog, GroupID)
SELECT LEFT(e.FirstName, 1) + LOWER(e.LastName),LEFT(e.FirstName, 3) + LOWER(RIGHT(e.LastName, 4)), 
		FirstName + ' ' + LastName, NULL, 2 FROM Employees e

ROLLBACK TRAN

--23.Write a SQL statement that changes the password to NULL for all users that have not been in the system since 10.03.2010.

UPDATE Users
	
	SET Password = NULL
	WHERE LastLog < CONVERT(DATETIME2, '2010-03-10')
	
--24.Write a SQL statement that deletes all users without passwords (NULL password).

BEGIN TRAN
	
	DELETE FROM Users
	WHERE Password IS NULL

	SELECT * FROM Users

ROLLBACK TRAN

--25.Write a SQL query to display the average employee salary by department and job title.

	SELECT d.Name AS [Department],
		   e.JobTitle AS [Job Title],
		   AVG(e.Salary) AS [Average Salary]  
				FROM Employees e
					INNER JOIN Departments d
					ON e.DepartmentID = d.DepartmentID

		GROUP BY d.Name, e.JobTitle
		ORDER BY d.Name
		
--26.Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the employees that take it.

	SELECT d.Name AS [Department],
		   e.JobTitle AS [Job Title],
		   MIN(e.FirstName + ' ' + e.LastName) AS [Full Name],
		   MIN(e.Salary) AS [Min. Salary]
				FROM Employees e
					INNER JOIN Departments d
					ON e.DepartmentID = d.DepartmentID

		GROUP BY d.Name, e.JobTitle
		ORDER BY d.Name
		
--27.Write a SQL query to display the town where maximal number of employees work.

	SELECT t.Name AS [Town Name], COUNT(*) AS [Employer Count]
	FROM Employees e
	INNER JOIN Addresses a 
	ON e.AddressID = a.AddressID
	INNER JOIN Towns t 
	ON a.TownID = t.TownID
	GROUP BY t.Name
	ORDER BY [Employer Count] DESC
	
--28.Write a SQL query to display the number of managers from each town.

SELECT t.Name AS [Town Name], COUNT(DISTINCT e.ManagerID) AS [Manager Count]
	FROM Employees e
	INNER JOIN Addresses a 
	ON e.AddressID = a.AddressID
	INNER JOIN Towns t 
	ON a.TownID = t.TownID
	GROUP BY t.Name
	ORDER BY [Manager Count] DESC
	
--29.Write a SQL to create table WorkHours to store work reports for each employee (employee id, date, task, hours, comments).
/*Don't forget to define identity, primary key and appropriate foreign key.
Issue few SQL statements to insert, update and delete of some data in the table.
Define a table WorkHoursLogs to track all changes in the WorkHours table with triggers.
For each change keep the old record data, the new record data and the command (insert / update / delete).*/

BEGIN TRAN
	
CREATE TABLE WorkHours
(
	[Id] INT IDENTITY,
	[EmployeeID] INT NOT NULL,
	[Date] DATETIME,
	[Task] NVARCHAR(100),
	[Hours] INT,
	[Comments] NVARCHAR(500),
	CONSTRAINT PK_WorkHours PRIMARY KEY(Id),
	CONSTRAINT FK_WorkHours FOREIGN KEY(EmployeeID)
	REFERENCES Employees(EmployeeID)
)
GO

INSERT INTO WorkHours([EmployeeID], [Date], [Task], [Hours], [Comments])
VALUES
	(2, GETDATE(),'Meeting', 3, 'Start Up New Project'),
	(3, GETDATE(),'Meeting', 1, 'Unit Tests for Billa Project'),
	(4, GETDATE(),'PTO', 7, 'Holiday'),
	(5, GETDATE(),'TeamWork', 4, 'Working on Inter Project');

UPDATE WorkHours SET [Hours] = 2 WHERE [EmployeeID] = 4

SELECT * FROM WorkHours wh

DELETE FROM WorkHours WHERE Task='PTO'

CREATE TABLE WorkHoursLogs 
(
	[ID] int IDENTITY,
	[WorkHoursID] int,
	[EmployeeID] int NOT NULL,
	[Date] datetime,
	[Task] nvarchar(100),
	[Hours] int,
	[Comments] nvarchar(500),
	[Command] nvarchar(30) NOT NULL,
	CONSTRAINT PK_WorkHoursLogs PRIMARY KEY(ID),
	CONSTRAINT FK_WorkHoursLogs_Employees FOREIGN KEY(EmployeeID)
	REFERENCES Employees(EmployeeID)
)
GO

CREATE TRIGGER TR_WorhoursInsert ON WorkHours FOR INSERT
AS
INSERT INTO WorkHoursLogs(WorkHoursID, EmployeeID, [Date], Task, [Hours], Comments, Command)
SELECT  ID, EmployeeID, [Date], Task, [Hours], Comments, 'INSERT'
FROM inserted
GO

CREATE TRIGGER TR_WorhoursUpdate ON WorkHours FOR UPDATE
AS
INSERT INTO WorkHoursLogs(WorkHoursID, EmployeeID, [Date], Task, [Hours], Comments, Command)
SELECT ID, EmployeeID, [Date], Task, [Hours], Comments, 'UPDATE'
FROM inserted
GO

CREATE TRIGGER TR_WorhoursDelete ON WorkHours FOR DELETE
AS
INSERT INTO WorkHoursLogs(WorkHoursID, EmployeeID, [Date], Task, [Hours], Comments, Command)
SELECT ID, EmployeeID, [Date], Task, [Hours], Comments, 'DELETE'
FROM deleted
GO

INSERT INTO WorkHours([EmployeeID], [Date], [Task], [Hours], [Comments])
VALUES
(10, GETDATE(),'Insert Trigger 1', 2, 'Testing insert trigger'),
(11, GETDATE(),'Insert Trigger 2', 4, 'Testing insert trigger again')

UPDATE WorkHours
SET Task = 'Update Trigger 1'
WHERE EmployeeID = 11

DELETE FROM WorkHours
WHERE EmployeeID = 11

SELECT * FROM WorkHoursLogs whl

ROLLBACK TRAN

--30.Start a database transaction, delete all employees from the 'Sales' department along with all dependent records from the pother tables.
--At the end rollback the transaction.

BEGIN TRAN

ALTER TABLE Departments
DROP CONSTRAINT FK_Departments_Employees

DELETE FROM Employees
WHERE DepartmentID = 
(
	SELECT d.DepartmentID FROM Departments d
	WHERE d.Name = 'Sales'
)

ROLLBACK TRAN

--31.Start a database transaction and drop the table EmployeesProjects.
--Now how you could restore back the lost table data?

BEGIN TRAN

DROP TABLE EmployeesProjects

ROLLBACK TRAN

--32.Find how to use temporary tables in SQL Server.
--Using temporary tables backup all records from EmployeesProjects and restore them back after dropping and re-creating the table.

BEGIN TRAN

CREATE TABLE #MyTemporaryTable
(
	EmployeeID int, 
	ProjectID int
)

SELECT EmployeeID, ProjectID FROM EmployeesProjects

DROP TABLE EmployeesProjects

CREATE TABLE EmployeesProjects
(
	EmployeeID int, 
	ProjectID int
)

SELECT EmployeeID, ProjectID FROM #MyTemporaryTable

ROLLBACK TRAN